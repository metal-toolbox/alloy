// Code generated by mockery v2.42.1. DO NOT EDIT.

package device

import (
	context "context"

	common "github.com/bmc-toolbox/common"

	mock "github.com/stretchr/testify/mock"

	model "github.com/metal-toolbox/alloy/internal/model"
)

// MockQueryor is an autogenerated mock type for the Queryor type
type MockQueryor struct {
	mock.Mock
}

type MockQueryor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryor) EXPECT() *MockQueryor_Expecter {
	return &MockQueryor_Expecter{mock: &_m.Mock}
}

// BiosConfiguration provides a mock function with given fields: ctx, loginInfo
func (_m *MockQueryor) BiosConfiguration(ctx context.Context, loginInfo *model.LoginInfo) (map[string]string, error) {
	ret := _m.Called(ctx, loginInfo)

	if len(ret) == 0 {
		panic("no return value specified for BiosConfiguration")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.LoginInfo) (map[string]string, error)); ok {
		return rf(ctx, loginInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.LoginInfo) map[string]string); ok {
		r0 = rf(ctx, loginInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.LoginInfo) error); ok {
		r1 = rf(ctx, loginInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryor_BiosConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BiosConfiguration'
type MockQueryor_BiosConfiguration_Call struct {
	*mock.Call
}

// BiosConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - loginInfo *model.LoginInfo
func (_e *MockQueryor_Expecter) BiosConfiguration(ctx interface{}, loginInfo interface{}) *MockQueryor_BiosConfiguration_Call {
	return &MockQueryor_BiosConfiguration_Call{Call: _e.mock.On("BiosConfiguration", ctx, loginInfo)}
}

func (_c *MockQueryor_BiosConfiguration_Call) Run(run func(ctx context.Context, loginInfo *model.LoginInfo)) *MockQueryor_BiosConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.LoginInfo))
	})
	return _c
}

func (_c *MockQueryor_BiosConfiguration_Call) Return(_a0 map[string]string, _a1 error) *MockQueryor_BiosConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryor_BiosConfiguration_Call) RunAndReturn(run func(context.Context, *model.LoginInfo) (map[string]string, error)) *MockQueryor_BiosConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// Inventory provides a mock function with given fields: ctx, loginInfo
func (_m *MockQueryor) Inventory(ctx context.Context, loginInfo *model.LoginInfo) (*common.Device, error) {
	ret := _m.Called(ctx, loginInfo)

	if len(ret) == 0 {
		panic("no return value specified for Inventory")
	}

	var r0 *common.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.LoginInfo) (*common.Device, error)); ok {
		return rf(ctx, loginInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.LoginInfo) *common.Device); ok {
		r0 = rf(ctx, loginInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.LoginInfo) error); ok {
		r1 = rf(ctx, loginInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryor_Inventory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inventory'
type MockQueryor_Inventory_Call struct {
	*mock.Call
}

// Inventory is a helper method to define mock.On call
//   - ctx context.Context
//   - loginInfo *model.LoginInfo
func (_e *MockQueryor_Expecter) Inventory(ctx interface{}, loginInfo interface{}) *MockQueryor_Inventory_Call {
	return &MockQueryor_Inventory_Call{Call: _e.mock.On("Inventory", ctx, loginInfo)}
}

func (_c *MockQueryor_Inventory_Call) Run(run func(ctx context.Context, loginInfo *model.LoginInfo)) *MockQueryor_Inventory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.LoginInfo))
	})
	return _c
}

func (_c *MockQueryor_Inventory_Call) Return(_a0 *common.Device, _a1 error) *MockQueryor_Inventory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryor_Inventory_Call) RunAndReturn(run func(context.Context, *model.LoginInfo) (*common.Device, error)) *MockQueryor_Inventory_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueryor creates a new instance of MockQueryor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryor {
	mock := &MockQueryor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
